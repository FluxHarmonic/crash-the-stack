(define-module (crash-the-stack main)
  (import (mesche array)
          (mesche math)
          (substratic window)
          (substratic texture)
          (substratic renderer)))

(define window (window-create 1280 720 "Crash The Stack"))
(define renderer (renderer-create window))

(define screen-scale 4.0)
(define tile-sprite (texture-load "assets/images/tile2.png" :smoothing nil))
(define faces-texture (texture-load "assets/images/faces.png" :smoothing nil))

;; The width and height here are based on the top surface size of the tile, not
;; the full texture size!
(define tile-width (* 30 ;; (texture-width tile-sprite)
                      screen-scale))
(define tile-height (* 36 ;; (texture-height tile-sprite)
                       screen-scale))

;; This is the pixel offset that gets added to each layer as it gets taller
(define layer-offset-x (* 3 screen-scale))
(define layer-offset-y (* -3 screen-scale))

(define-record-type tile
  (fields x
          y
          face
          layer
          scale
          rotation))

(define (render-tiles tile-array)
  (let render ((i 0))
    (if (not (equal? i (array-length tile-array)))
        (let ((tile (array-nth tile-array i))
              (win-center-x (/ (window-width window) 2))
              (win-center-y (/ (window-height window) 2)))
          (let ((tile-x (+ (* (tile-layer tile) layer-offset-x)
                           (+ win-center-x
                              (* (tile-x tile) tile-width))))
                (tile-y (+ (* (tile-layer tile) layer-offset-y)
                           (+ win-center-y
                              (* (tile-y tile) tile-height))))
                (texture-x (* (% (tile-face tile) 5) 30))
                (texture-y (* (floor (/ (tile-face tile) 5)) 35)))
            (renderer-draw-texture renderer
                                   tile-sprite
                                   tile-x
                                   tile-y
                                   :scale 4.0
                                   :centered t)
            (renderer-draw-texture-region renderer
                                          faces-texture
                                          (+ tile-x 3) ;; TODO: DO NOT HARDCODE
                                          (- tile-y 5)
                                          30
                                          35
                                          texture-x
                                          texture-y
                                          :scale 4.0
                                          :centered t)
            (render (+ i 1)))))))

;; Define our first entity and create some components
(define tiles (make-array))
(array-push tiles (make-tile :x  1.5 :y -1.5 :face 0 :layer 0))
(array-push tiles (make-tile :x  0.5 :y -1.5 :face 1 :layer 0))
(array-push tiles (make-tile :x -0.5 :y -1.5 :face 2 :layer 0))
(array-push tiles (make-tile :x -1.5 :y -1.5 :face 1 :layer 0))
(array-push tiles (make-tile :x  1.5 :y -0.5 :face 1 :layer 0))
(array-push tiles (make-tile :x  0.5 :y -0.5 :face 1 :layer 0))
(array-push tiles (make-tile :x -0.5 :y -0.5 :face 1 :layer 0))
(array-push tiles (make-tile :x -1.5 :y -0.5 :face 1 :layer 0))
(array-push tiles (make-tile :x  1.5 :y 0.5 :face 1 :layer 0))
(array-push tiles (make-tile :x  0.5 :y 0.5 :face 1 :layer 0))
(array-push tiles (make-tile :x -0.5 :y 0.5 :face 1 :layer 0))
(array-push tiles (make-tile :x -1.5 :y 0.5 :face 1 :layer 0))
(array-push tiles (make-tile :x  1.5 :y 1.5 :face 1 :layer 0))
(array-push tiles (make-tile :x  0.5 :y 1.5 :face 1 :layer 0))
(array-push tiles (make-tile :x -0.5 :y 1.5 :face 1 :layer 0))
(array-push tiles (make-tile :x -1.5 :y 1.5 :face 1 :layer 0))

(array-push tiles (make-tile :x  0.5 :y -0.5 :face 1 :layer 1))
(array-push tiles (make-tile :x -0.5 :y -0.5 :face 1 :layer 1))
(array-push tiles (make-tile :x  0.5 :y 0.5 :face 1 :layer 1))
(array-push tiles (make-tile :x -0.5 :y 0.5 :face 1 :layer 1))

(array-push tiles (make-tile :x 0 :y 0 :face 1 :layer 2))

;; Show the window
(window-show window)

(define (game-loop)
  (if (window-needs-close? window)
      (display "Exiting...")
      (begin
        ;; Clear the screen
        (renderer-clear renderer 43 4 82)

        ;; Render the tiles
        (render-tiles tiles)

        ;; Flip the buffers
        (renderer-swap-buffers renderer)

        ;; Next frame!
        (game-loop))))

;; Start the game loop
(game-loop)
