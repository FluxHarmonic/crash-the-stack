(define-module (crash-the-stack main)
  (import (mesche array)
          (substratic window)
          (substratic texture)
          (substratic renderer)))

(define window (window-create 1280 720 "Crash The Stack"))
(define renderer (renderer-create window))

(define tile-sprite (texture-load "assets/images/tile2.png" :smoothing nil))
(define tile-width (texture-width tile-sprite))
(define tile-height (texture-height tile-sprite))

(define-record-type tile
  (fields x
          y
          scale
          rotation))

(define (render-tiles tile-array)
  (let render ((i 0))
    (if (not (equal? i (array-length tile-array)))
        (let ((tile (array-nth tile-array i)))
          (renderer-draw-texture renderer
                                 tile-sprite
                                 (tile-x tile)
                                 (tile-y tile))
          (render (+ i 1))))))

;; Define our first entity and create some components
(define tiles (make-array))
(array-push tiles (make-tile :x 200 :y 100))
(array-push tiles (make-tile :x 300 :y 200))
(array-push tiles (make-tile :x 400 :y 300))
(array-push tiles (make-tile :x 500 :y 400))
(array-push tiles (make-tile :x 600 :y 500))

;; Show the window
(window-show window)

(define (game-loop)
  (if (window-needs-close? window)
      (display "Exiting...")
      (begin
        ;; Clear the screen
        (renderer-clear renderer 43 4 82)

        ;; Render the tiles
        (render-tiles tiles)

        ;; Flip the buffers
        (renderer-swap-buffers renderer)

        ;; Next frame!
        (game-loop))))

;; Start the game loop
(game-loop)
