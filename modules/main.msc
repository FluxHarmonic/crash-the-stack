(define-module (crash-the-stack main)
  (import (mesche array)
          (mesche math)
          (mesche list)
          (mesche time)
          (mesche string)
          (substratic font)
          (substratic window)
          (substratic texture)
          (substratic renderer)))

(define window (window-create 1280 720 "Crash The Stack"))
(define renderer (renderer-create window))

(define screen-scale 4.0)
(define tile-sprite (texture-load "assets/images/tile2.png" :smoothing nil))
(define faces-texture (texture-load "assets/images/faces.png" :smoothing nil))
(define bitmap-font (font-load-file "assets/fonts/Thintel.ttf" 75))

;; The width and height here are based on the top surface size of the tile, not
;; the full texture size!
(define tile-width (* 30 ;; (texture-width tile-sprite)
                      screen-scale))
(define tile-height (* 36 ;; (texture-height tile-sprite)
                       screen-scale))

;; This is the pixel offset that gets added to each layer as it gets taller
(define layer-offset-x (* 3 screen-scale))
(define layer-offset-y (* -3 screen-scale))

(define-record-type tile
  (fields x
          y
          face
          layer
          scale
          rotation))

(define (render-tiles tile-array)
  (let render ((i 0))
    (if (not (equal? i (array-length tile-array)))
        (let ((tile (array-nth tile-array i))
              (win-center-x (/ (window-width window) 2))
              (win-center-y (/ (window-height window) 2)))
          (let ((tile-x (+ (* (tile-layer tile) layer-offset-x)
                           (+ win-center-x
                              (* (tile-x tile) tile-width))))
                (tile-y (+ (* (tile-layer tile) layer-offset-y)
                           (+ win-center-y
                              (* (tile-y tile) tile-height))))
                (texture-x (* (% (tile-face tile) 5) 30))
                (texture-y (* (floor (/ (tile-face tile) 5)) 35)))
            (renderer-draw-texture renderer
                                   tile-sprite
                                   tile-x
                                   tile-y
                                   :scale 4.0
                                   :centered t)
            (renderer-draw-texture-region renderer
                                          faces-texture
                                          (+ tile-x 3) ;; TODO: DO NOT HARDCODE
                                          (- tile-y 5)
                                          30
                                          35
                                          texture-x
                                          texture-y
                                          :scale 4.0
                                          :centered t)
            (render (+ i 1)))))))

(define (array-find-free-index array)
  (let next-index ((index (rand-int (array-length array))))
    ;; Check if the index is free
    (let ((at-index (array-nth array index)))
      (if at-index
          (next-index (rand-int (array-length array)))
          index))))

(define (randomize-faces tile-count num-faces)
  (let next-face ((face-array (make-array tile-count))
                  (remaining-count (/ tile-count 2)))
    (if (> remaining-count 0)
        ;; Pick one face, place it at two random indices
        (let ((face (rand-int num-faces)))
          (array-nth-set! face-array (array-find-free-index face-array) face)
          (array-nth-set! face-array (array-find-free-index face-array) face)
          (next-face face-array (- remaining-count 1)))
        face-array)))

(define (make-stack tile-positions num-faces)
  (let next-tile ((tile-array (make-array))
                  (tiles tile-positions)
                  (faces (randomize-faces 20 num-faces))
                  (face-index 0))
    (if (pair? tiles)
        (begin
          (array-push tile-array
                      (make-tile :x (car (car tiles))
                                 :y (car (cdr (car tiles)))
                                 :layer (car (cdr (cdr (car tiles))))
                                 :face (array-nth faces face-index)))
          (next-tile tile-array (cdr tiles) faces (+ face-index 1)))
        tile-array)))

;; Define our first entity and create some components
(define tile-positions
  '((1.5 -1.5 0)
    (0.5 -1.5 0)
    (-0.5 -1.5 0)
    (-1.5 -1.5 0)
    (1.5 -0.5 0)
    (0.5 -0.5 0)
    (-0.5 -0.5 0)
    (-1.5 -0.5 0)
    (1.5 0.5 0)
    (0.5 0.5 0)
    (-0.5 0.5 0)
    (-1.5 0.5 0)
    (1.5 1.5 0)
    (0.5 1.5 0)
    (-0.5 1.5 0)
    (-1.5 1.5 0)

    (0.5 -0.5 1)
    (-0.5 -0.5 1)
    (0.5 0.5 1)
    (-0.5 0.5 1)))

(define tiles (make-stack tile-positions 3))

(define (tile-nth tile-array tile-index)
  (if (and (> tile-index 0)
           (< tile-index (array-length tile-array)))
      (array-nth tile-array tile-index)))

;; To look left:
;; - Keep looking at indices before the current index to check for a specific position
;; - For example, at position (-1, 0), keep looping left until we find (-2, 0) or not

;; Alejandro's idea:
;; - Store nested lists, for each layer, nest a list of tiles (columns) for each row
;; - The first row will give you the y position of the row
;; - The left-most row element will automatically be free

(define (tile-playable? tile-array tile-index)
  (let ((left-tile (tile-nth tile-array (- tile-index 1)))
        (right-tile (tile-nth tile-array (- tile-index 1))))
    t))

(define (build-tile-lists tile-array)
  (let next-tile ((tile-index 0)
                  (layers '())
                  (layer '())
                  (layer-index 0)
                  (row '()))
    (if (< tile-index (array-length tile-array))
        (let ((tile (array-nth tile-array tile-index)))
          ;; Compare against the previous tile's x/y position and layer
          (set! row (cons tile row))
          (display row)
          (display "\n")
          (next-tile (+ tile-index 1)
                     layers
                     layer
                     layer-index
                     row))
        layers)))

(define (calculate-playable-tiles tile-array)
  (let next-tile ((tile-index 0)
                  (playable '()))
    (if (< tile-index (array-length tile-array))
        (next-tile (+ tile-index 1) (cons tile-index playable))
        playable)))

;; (display "PLAYABLE TILES: ")
;; (display (calculate-playable-tiles tiles))
;; (build-tile-lists tiles)
;; (display "\n")

;; (array-push tiles (make-tile :x 0 :y 0 :face 1 :layer 2))

;; Create an array of the same length as the tiles array
;; Generate length / 2 entries for a random tile face index
;; Randomize the tile list
;; When creating tiles, just pick the frontmost or first remainign tile

(display "TILE COUNT: ")
(display (array-length tiles))
(display "\n")

;; Show the window
(window-show window)

(define hello-world-width (font-text-width bitmap-font "Hello world!"))

(define (game-loop)
  (let next-frame ((last-frame-time (time-current-msec))
                   (current-frame-time (time-current-msec))
                   (fps nil))
    (let ((time-step (/ (- current-frame-time last-frame-time) 1000.0)))
      (if (window-needs-close? window)
          (display "Exiting...")
          (begin
            ;; Clear the screen
            (renderer-clear renderer 43 4 82)

            ;; Render the tiles
            (render-tiles tiles)

            (let ((tile-count-string (string-append "Tiles Remaining: " (number->string (array-length tiles)))))
              (render-text renderer
                           bitmap-font
                           tile-count-string
                           (- (/ (window-width window) 2)
                              (/ (font-text-width bitmap-font tile-count-string) 2))
                           (- (window-height window) 60)))

            ;; (display (string-append "CURRENT TIME: " (number->string (time-current-msec)) "\n"))

            ;; Render the FPS
            (if fps
                (render-text renderer
                             bitmap-font
                             (string-append "FPS: " (number->string fps))
                             (- (- (window-width window) hello-world-width)
                                25)
                             60))

            ;; Flip the buffers
            (renderer-swap-buffers renderer)

            ;; (display (string-append "FPS: " (number->string fps) "\n"))

            ;; Next frame!
            (next-frame current-frame-time
                        (time-current-msec)
                        (if fps
                            (+ (* fps 0.95) (* 0.05 (/ 1.0 time-step)))
                            (if (> time-step 0.0)
                                (/ 1.0 time-step)
                                nil))))))))

;; Start the game loop
(game-loop)
